- name: Gather facts
  community.network.routeros_command:
    commands: '{{ switch_autoconf | map(attribute="export") | list }}'
  register: ros_facts
  check_mode: no

- name: Show changes
  debug:
    msg: '{{ ros_facts.stdout[i] | mikrotik_parse(item.command, item.unique_attribute) | mikrotik_diff( lookup("template", item.template) | mikrotik_parse(item.command, item.unique_attribute) ) }}'
  loop: '{{ switch_autoconf }}'
  loop_control:
    label: '{{ item.command }}'
    index_var: i
  register: ros_changes

- name: Apply changes
  community.network.routeros_command:
    commands: '{{ item.msg }}'
  failed_when: '"failure" in ros_commands.stdout | join("\n")'
  when: not ansible_check_mode and item.msg
  loop: '{{ ros_changes.results }}'
  loop_control:
    label: '{{ item.item.command }}'
  register: ros_commands
  tags: ['apply']

- name: Show results
  debug:
    msg: '{{ item.stdout }}'
  when: not (item.skipped | default(False))
  loop: '{{ ros_commands.results }}'
  loop_control:
    label: '{{ item.item.command | default() }}'
  tags: ['apply']
